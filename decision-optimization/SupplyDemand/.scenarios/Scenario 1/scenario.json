{"qualifiers":[{"name":"modelType","value":"python"},{"name":"modelMetadata","value":"{\"fileName\":\"SupplyDemand_csv.py\",\"fileContent\":\"from __future__ import division\\r\\nfrom collections import namedtuple\\r\\nfrom docplex.mp.model import Model\\r\\nimport pandas as pd\\r\\nimport math\\r\\n\\r\\n#\\r\\n# Data import and data preparation --------------------------------\\r\\n#\\r\\n# Lists the markets.\\r\\nmarkets_df = inputs[\\\"markets\\\"]\\r\\nmarkets = markets_df[\\\"name\\\"].tolist()\\r\\n\\r\\n# Lists the months of the planning horizon.\\r\\nmonths_df = inputs[\\\"months\\\"]\\r\\nmonths = months_df[\\\"name\\\"].tolist()\\r\\nnext_month = {months[m]: months[m+1] for m in range(len(months) - 1)}\\r\\n\\r\\n# The Parameters\\r\\nparameters_df = inputs[\\\"parameters\\\"]\\r\\nparameters = [r for r in parameters_df.itertuples(index=False)][0]\\r\\n\\r\\n# Lists the plants\\r\\nplants_df = inputs[\\\"plants\\\"]\\r\\nplants = plants_df[\\\"name\\\"].tolist()\\r\\n\\r\\n# Lists the products\\r\\nproducts_df = inputs[\\\"products\\\"]\\r\\nproducts = products_df[\\\"name\\\"].tolist()\\r\\n\\r\\n# Provides the projected marginal profit for a product, market and month.\\r\\nmarginalProfits_df = inputs[\\\"marginal_profits\\\"]\\r\\n# Provides the capacities of a plant over the months.(see tuple \\\"TPlantMonthCapacity\\\")\\r\\nplantMonthCapacities_df = inputs[\\\"plant_month_capacities\\\"]\\r\\n# Provides the product specific capacities of a plant.(see tuple \\\"TPlantProductCapacity\\\")\\r\\nplantProductCapacities_df = inputs[\\\"plant_product_capacities\\\"]\\r\\n\\r\\n# Indicates the production cost of a product at a given plant.\\r\\nplantProductCosts_df = inputs[\\\"plant_product_costs\\\"]\\r\\n\\r\\n# Lists the sales requirements.\\r\\nsales_df = inputs[\\\"sales\\\"]\\r\\n\\r\\n# Gives the demand of a product for the given market and month.\\r\\ndemands_df = inputs[\\\"demands\\\"]\\r\\ndemands_df = pd.pivot_table(demands_df, index=[\\\"product\\\", \\\"market\\\", \\\"month\\\"], values=[\\\"Qty\\\"])\\r\\nprodMarketMonthMultiIndex = demands_df.index\\r\\n\\r\\ndemands = demands_df.to_dict()['Qty']\\r\\n\\r\\n\\r\\n# Indicates the initial inventory of a product for a given market.\\r\\n# This is mapped as an array so that we will get the default value of 0 when\\r\\n#  the data is not specifie in the table.\\r\\n#  - dimension #1: the product\\r\\n#  - dimension #2: the market\\r\\n#  - value: the initial inventory or 0 if not defined.\\r\\ninitialInventories_df = inputs[\\\"initial_inventories\\\"]\\r\\ninitialInventories_df = pd.pivot_table(initialInventories_df, index=[\\\"product\\\", \\\"market\\\"], values=[\\\"Qty\\\"])\\r\\nprodMarketMultiIndex = initialInventories_df.index\\r\\ninitialInventories = initialInventories_df.to_dict()['Qty']\\r\\n\\r\\n\\r\\n# Create MP Model\\r\\nmdl = Model(\\\"SupplyDemand\\\")\\r\\n\\r\\n# Provides the projected production of a product and a month at plants.\\r\\nplantProdMonthDataPoint = namedtuple(\\\"plantProdMonthDataPoint\\\", [\\\"plant\\\", \\\"product\\\", \\\"month\\\"])\\r\\nplantProdMonthMultiIndex = pd.MultiIndex.from_tuples([(plants[pl], products[p], months[mo])\\r\\n                                                      for pl in range(len(plants))for p in range(len(products))\\r\\n                                                      for mo in range(len(months))],\\r\\n                                                     names=list(plantProdMonthDataPoint._fields))\\r\\nProduction_df = pd.DataFrame(mdl.integer_var_list(plantProdMonthMultiIndex.values.tolist(), lb=0, name=\\\"Production\\\"),\\r\\n                             index=plantProdMonthMultiIndex, columns=['Production']).sortlevel()\\r\\nProduction = Production_df.to_dict()['Production']\\r\\nProduction_df = Production_df.reset_index()\\r\\n\\r\\n# Provides the projected inventory level of a product for the given market and month\\r\\nInventory_df = pd.DataFrame(mdl.integer_var_list(prodMarketMonthMultiIndex.values.tolist(), lb=0, name=\\\"Inventory\\\"),\\r\\n                            index=prodMarketMonthMultiIndex, columns=['Inventory']).sortlevel()\\r\\nInventory = Inventory_df.to_dict()['Inventory']\\r\\nInventory_df = Inventory_df.reset_index()\\r\\n\\r\\n# Provides the projected executed sales of a product for the given marlet and month\\r\\nExecutedSales_df = pd.DataFrame(mdl.integer_var_list(prodMarketMonthMultiIndex.values.tolist(), lb=0, name=\\\"ExecutedSales\\\"),\\r\\n                            index=prodMarketMonthMultiIndex, columns=['ExecutedSales']).sortlevel()\\r\\nExecutedSales = ExecutedSales_df.to_dict()['ExecutedSales']\\r\\nExecutedSales_df = ExecutedSales_df.reset_index()\\r\\n\\r\\n# Provides the projected allocation of a product for the given market and month.\\r\\nAllocation_df = pd.DataFrame(mdl.integer_var_list(prodMarketMonthMultiIndex.values.tolist(), lb=0, name=\\\"Allocation\\\"),\\r\\n                            index=prodMarketMonthMultiIndex, columns=['Allocation']).sortlevel()\\r\\nAllocation = Allocation_df.to_dict()['Allocation']\\r\\nAllocation_df = Allocation_df.reset_index()\\r\\n\\r\\n# Define the planning horizon by restricting the number of months\\r\\nfirstMonth = months[0]\\r\\nhorizon = [m for m in months[0:parameters.nbMonthsPlanned]]\\r\\ninventoryHorizon = {m for m in months[0:parameters.nbMonthsPlanned]}\\r\\n\\r\\n# Goals\\r\\ndeviation = mdl.sumsq((Allocation[pr, ma, mo] - float(demands[pr, ma, mo]))\\r\\n                      for ma in markets for pr in products for mo in horizon)\\r\\n\\r\\nproductionCost = mdl.sum(Production[c.plant, c.product, mo] * c.value\\r\\n                         for c in plantProductCosts_df.itertuples(index=False) for mo in horizon)\\r\\n\\r\\nmarginalProfit = mdl.sum(ExecutedSales[pro, mark, mo] * val\\r\\n                         for (pro, mark, mo, val) in marginalProfits_df[marginalProfits_df['month'].isin(horizon)].\\r\\n                         itertuples(index=False))\\r\\n\\r\\nmdl.add_kpi(deviation, \\\"deviation\\\")\\r\\nmdl.add_kpi(productionCost, \\\"productionCost\\\")\\r\\nmdl.add_kpi(marginalProfit, \\\"marginalProfit\\\")\\r\\n\\r\\nmdl.minimize(deviation + productionCost - marginalProfit)\\r\\n\\r\\n#\\r\\n# Constraints definition ---------------------------------------------------\\r\\n#\\r\\n# Inventory at the beginning of the first month\\r\\nmdl.add_constraints(Inventory[pr, ma, firstMonth] == initialInventories[pr, ma] for pr in products for ma in markets)\\r\\n\\r\\n# Plants (at each month) cannot produce more than their global capacity.\\r\\nfor pmc in plantMonthCapacities_df[plantMonthCapacities_df[\\\"month\\\"].isin(horizon)].itertuples(index=False):\\r\\n    mdl.add_constraint(mdl.sum(Production[pmc.plant, pr, pmc.month] for pr in products) <= pmc.value)\\r\\n\\r\\n\\r\\n# Plants (for each product and month) cannot produce more than their global capacity.\\r\\nmdl.add_constraints(Production[ppc.plant, ppc.product, mo] <= ppc.value\\r\\n                    for ppc in plantProductCapacities_df.itertuples(index=False)\\r\\n                    for mo in horizon)\\r\\n\\r\\n# Plants with no limits cannot produce this product\\r\\npdc_entries = pd.pivot_table(plantProductCapacities_df, index=[\\\"plant\\\", \\\"product\\\"], values=[\\\"value\\\"]).to_dict()['value']\\r\\nmdl.add_constraints(Production[pl, pr, mo] == 0 for pl in plants for pr in products if pdc_entries.get((pl, pr)) is None\\r\\n                    for mo in horizon)\\r\\n\\r\\n# Production equals Allocation\\r\\nmdl.add_constraints(\\r\\n    mdl.sum(Allocation[pr, ma, mo] for ma in markets) == mdl.sum(Production[pl, pr, mo] for pl in plants)\\r\\n    for mo in horizon for pr in products)\\r\\n\\r\\n# Executed Sales are at least the firm sales\\r\\nmdl.add_constraints(\\r\\n    ExecutedSales[s.product, s.market, s.month] >= s.value\\r\\n    for s in sales_df[(sales_df['value'] > 0) & (sales_df['month'].isin(horizon))].itertuples(index=False))\\r\\n\\r\\n# Executed Sales are at most the planned demand\\r\\nmdl.add_constraints(ExecutedSales[pr, ma, mo] <= demands[pr, ma, mo]\\r\\n                    for pr in products for ma in markets for mo in horizon)\\r\\n\\r\\n# Product Conservation - assumes inventory doesn't move between markets\\r\\nfor pr in products:\\r\\n    for ma in markets:\\r\\n        for mo in horizon:\\r\\n            mdl.add_constraint(\\r\\n                # what was available in inventory at the beginning of the month\\r\\n                Inventory[pr, ma, mo]\\r\\n                # what is allocated to this market this month\\r\\n                + Allocation[pr, ma, mo]\\r\\n                ==\\r\\n                # what is sold during this month\\r\\n                ExecutedSales[pr, ma, mo]\\r\\n                # what will stay in inventory at the end of the month\\r\\n                + Inventory[pr, ma, next_month[mo]]\\r\\n            )\\r\\n\\r\\nmdl.solve(log_output=False)\\r\\n\\r\\n#\\r\\n# Output --------------------------------------------------------------------\\r\\n#\\r\\n# Provides more details about the projected allocation of a product to a market.\\r\\n#  - field allocation: the allocation in unit of product\\r\\nTDemandAllocationResult = namedtuple(\\\"TDemandAllocationResult\\\",\\r\\n                                     [\\\"product\\\", \\\"market\\\", \\\"month\\\", \\\"demand\\\", \\\"allocation\\\", \\\"absdiff\\\", \\\"reldiff\\\"])\\r\\n\\r\\n# Provides more details about the projected production and comparison to capacity.\\r\\nTProductionResult = namedtuple(\\\"TProductionResult\\\",\\r\\n                               [\\\"plant\\\", \\\"product\\\", \\\"month\\\", \\\"capacity\\\", \\\"production\\\", \\\"absdiff\\\", \\\"reldiff\\\"])\\r\\n\\r\\n# Provides KPI details\\r\\nTKpiResult = namedtuple(\\\"TKpiResult\\\", [\\\"deviation\\\", \\\"productionCost\\\", \\\"marginalProfit\\\"])\\r\\n\\r\\n# Build result tables\\r\\n# DEMAND_ALLOCATION_RESULTS\\r\\ndemandAllocationResults = []\\r\\nfor pr in products:\\r\\n    for ma in markets:\\r\\n        for mo in horizon:\\r\\n            d = demands[pr, ma, mo]\\r\\n            alloc = Allocation[pr, ma, mo].solution_value\\r\\n            dar = TDemandAllocationResult(pr, ma, mo, d,\\r\\n                                         int(alloc), int(math.fabs(d - alloc)),\\r\\n                                         100 if alloc == 0 else 100 * math.fabs(d - alloc) / (1 + d))\\r\\n            demandAllocationResults.append(dar)\\r\\n\\r\\ndemandAllocationResults_df = pd.DataFrame(demandAllocationResults, columns=list(TDemandAllocationResult._fields))\\r\\n\\r\\n# PRODUCTION_RESULTS\\r\\nproductionResults = []\\r\\nfor ppc in plantProductCapacities_df.itertuples(index=False):\\r\\n    for mo in horizon:\\r\\n        prod = Production[ppc.plant, ppc.product, mo].solution_value\\r\\n        productionResults.append(TProductionResult(ppc.plant,ppc.product, mo, ppc.value,\\r\\n                                                   int(prod),\\r\\n                                                   int(math.fabs(ppc.value - prod)),\\r\\n                                                   100 * math.fabs(ppc.value - prod) / (1 + ppc.value)))\\r\\nproductionResults_df = pd.DataFrame(productionResults, columns=list(TProductionResult._fields))\\r\\n\\r\\n# KPI results\\r\\nkpiResults = [TKpiResult(mdl.kpi_by_name(\\\"deviation\\\").compute(),\\r\\n                         mdl.kpi_by_name(\\\"productionCost\\\").compute(),\\r\\n                         mdl.kpi_by_name(\\\"marginalProfit\\\").compute())]\\r\\nkpiResults_df = pd.DataFrame(kpiResults, columns=list(TKpiResult._fields))\\r\\noutputs = dict()\\r\\noutputs['demandAllocationResults'] = demandAllocationResults_df\\r\\noutputs['productionResults'] = productionResults_df\\r\\noutputs['kpiResults'] = kpiResults_df\\r\\n\",\"lastUploadTime\":1523366531188}"}],"parentId":"SupplyDemand","category":"scenario","creator":"alain","createdAt":1523366450118,"usage":{"lastModificationTime":1523366601922,"lastModifier":"alain"},"dataUsagePerCategory":{"input":{"lastModificationTime":1523366470494,"lastModifier":"alain"},"model":{"lastModificationTime":1523366529694,"lastModifier":"alain"},"output":{"lastModificationTime":1523366601922,"lastModifier":"alain"}},"state":"available","tables":[{"tableType":{"columns":[{"key":"product","dataType":"String"},{"key":"market","dataType":"String"},{"key":"month","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"marginal_profits","category":"input","lineage":"Copied from marginal_profits.csv","numberOfRows":7656,"creator":"alain","createdAt":1523366469884,"lastUpdater":"alain","updatedAt":1523366470099,"path":"../../../../datasets/marginal_profits.csv"},{"tableType":{"columns":[{"key":"product","dataType":"String"},{"key":"market","dataType":"String"},{"key":"month","dataType":"String"},{"key":"Qty","dataType":"Number"}]},"name":"demands","category":"input","lineage":"Copied from demands.csv","numberOfRows":7656,"creator":"alain","createdAt":1523366469896,"lastUpdater":"alain","updatedAt":1523366470084,"path":"../../../../datasets/demands.csv"},{"tableType":{"columns":[{"key":"nbMonthsPlanned","dataType":"Number"}]},"name":"parameters","category":"input","lineage":"Copied from parameters.csv","numberOfRows":1,"creator":"alain","createdAt":1523366469906,"lastUpdater":"alain","updatedAt":1523366470005,"path":"../../../../datasets/parameters.csv"},{"tableType":{"columns":[{"key":"product","dataType":"String"},{"key":"market","dataType":"String"},{"key":"Qty","dataType":"Number"}]},"name":"initial_inventories","category":"input","lineage":"Copied from initial_inventories.csv","numberOfRows":319,"creator":"alain","createdAt":1523366469921,"lastUpdater":"alain","updatedAt":1523366470035,"path":"../../../../datasets/initial_inventories.csv"},{"tableType":{"columns":[{"key":"name","dataType":"String"}]},"name":"markets","category":"input","lineage":"Copied from markets.csv","numberOfRows":11,"creator":"alain","createdAt":1523366469936,"lastUpdater":"alain","updatedAt":1523366469987,"path":"../../../../datasets/markets.csv"},{"tableType":{"columns":[{"key":"name","dataType":"String"}]},"name":"months","category":"input","lineage":"Copied from months.csv","numberOfRows":24,"creator":"alain","createdAt":1523366469950,"lastUpdater":"alain","updatedAt":1523366470059,"path":"../../../../datasets/months.csv"},{"tableType":{"columns":[{"key":"plant","dataType":"String"},{"key":"month","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"plant_month_capacities","category":"input","lineage":"Copied from plant_month_capacities.csv","numberOfRows":168,"creator":"alain","createdAt":1523366470194,"lastUpdater":"alain","updatedAt":1523366470262,"path":"../../../../datasets/plant_month_capacities.csv"},{"tableType":{"columns":[{"key":"plant","dataType":"String"},{"key":"product","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"plant_product_capacities","category":"input","lineage":"Copied from plant_product_capacities.csv","numberOfRows":203,"creator":"alain","createdAt":1523366470237,"lastUpdater":"alain","updatedAt":1523366470392,"path":"../../../../datasets/plant_product_capacities.csv"},{"tableType":{"columns":[{"key":"plant","dataType":"String"},{"key":"product","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"plant_product_costs","category":"input","lineage":"Copied from plant_product_costs.csv","numberOfRows":203,"creator":"alain","createdAt":1523366470299,"lastUpdater":"alain","updatedAt":1523366470435,"path":"../../../../datasets/plant_product_costs.csv"},{"tableType":{"columns":[{"key":"name","dataType":"String"}]},"name":"products","category":"input","lineage":"Copied from products.csv","numberOfRows":29,"creator":"alain","createdAt":1523366470319,"lastUpdater":"alain","updatedAt":1523366470457,"path":"../../../../datasets/products.csv"},{"tableType":{"columns":[{"key":"product","dataType":"String"},{"key":"market","dataType":"String"},{"key":"month","dataType":"String"},{"key":"value","dataType":"Number"}]},"name":"sales","category":"input","lineage":"Copied from sales.csv","numberOfRows":902,"creator":"alain","createdAt":1523366470344,"lastUpdater":"alain","updatedAt":1523366470494,"path":"../../../../datasets/sales.csv"},{"tableType":{"columns":[{"key":"name","dataType":"String"}]},"name":"plants","category":"input","lineage":"Copied from plants.csv","numberOfRows":7,"creator":"alain","createdAt":1523366470368,"lastUpdater":"alain","updatedAt":1523366470479,"path":"../../../../datasets/plants.csv"},{"tableType":{"columns":[{"key":"deviation","dataType":"Number"},{"key":"productionCost","dataType":"Number"},{"key":"marginalProfit","dataType":"Number"}]},"name":"kpiResults","category":"output","numberOfRows":1,"creator":"alain","createdAt":1523366601670,"lastUpdater":"alain","updatedAt":1523366601670,"path":"kpiResults.csv"},{"tableType":{"columns":[{"key":"NAME","dataType":"String"},{"key":"VALUE","dataType":"Number"}]},"name":"kpis","category":"output","numberOfRows":3,"creator":"alain","createdAt":1523366601771,"lastUpdater":"alain","updatedAt":1523366601771,"path":"kpis.csv"},{"tableType":{"columns":[{"key":"plant","dataType":"String"},{"key":"product","dataType":"String"},{"key":"month","dataType":"String"},{"key":"capacity","dataType":"Number"},{"key":"production","dataType":"Number"},{"key":"absdiff","dataType":"Number"},{"key":"reldiff","dataType":"Number"}]},"name":"productionResults","category":"output","numberOfRows":1827,"creator":"alain","createdAt":1523366601820,"lastUpdater":"alain","updatedAt":1523366601820,"path":"productionResults.csv"},{"tableType":{"columns":[{"key":"product","dataType":"String"},{"key":"market","dataType":"String"},{"key":"month","dataType":"String"},{"key":"demand","dataType":"Number"},{"key":"allocation","dataType":"Number"},{"key":"absdiff","dataType":"Number"},{"key":"reldiff","dataType":"Number"}]},"name":"demandAllocationResults","category":"output","numberOfRows":2871,"creator":"alain","createdAt":1523366601922,"lastUpdater":"alain","updatedAt":1523366601922,"path":"demandAllocationResults.csv"}],"assets":[{"name":"model.py","category":"model","creator":"alain","createdAt":1523366529694,"lastUpdater":"alain","updatedAt":1523366529694,"contentType":"application/json","path":"model.py"},{"name":"log.txt","category":"output","creator":"alain","createdAt":1523366601867,"lastUpdater":"alain","updatedAt":1523366601867,"path":"log.txt"}]}